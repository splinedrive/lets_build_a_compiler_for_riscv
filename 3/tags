!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Abort	cradle.c	/^void Abort(char *s) {$/;"	f
Add	main.c	/^void Add() {$/;"	f
Divide	main.c	/^void Divide() {$/;"	f
Emit	cradle.c	/^void Emit(char *s) { printf("\\t%s", s); }$/;"	f
EmitLn	cradle.c	/^void EmitLn(char *s) {$/;"	f
Error	cradle.c	/^void Error(char *s) { printf("\\nError: %s.", s); }$/;"	f
Expected	cradle.c	/^void Expected(char *s) {$/;"	f
Expression	main.c	/^void Expression() {$/;"	f
Factor	main.c	/^void Factor() {$/;"	f
GetChar	cradle.c	/^void GetChar() { Look = getchar(); }$/;"	f
GetName	cradle.c	/^char *GetName() {$/;"	f
GetNum	cradle.c	/^char *GetNum() {$/;"	f
Halt	cradle.c	/^void Halt() {$/;"	f
Init	cradle.c	/^void Init() { GetChar(); }$/;"	f
IsAddop	cradle.c	/^int IsAddop(char c) { return strchr("+-", c) != 0; }$/;"	f
IsAlNum	cradle.c	/^int IsAlNum(char c) { return IsAlpha(c) || IsDigit(c); }$/;"	f
IsAlpha	cradle.c	/^int IsAlpha(char c) {$/;"	f
IsDigit	cradle.c	/^int IsDigit(char c) { return (c >= '0' && c <= '9'); }$/;"	f
IsMulop	cradle.c	/^int IsMulop(char c) { return strchr("*\/", c) != 0; }$/;"	f
IsWhite	cradle.c	/^int IsWhite (char c) { return strchr(" \\t", c) != 0; }$/;"	f
Look	cradle.h	/^char Look;$/;"	v
MAX_BUF	cradle.h	3;"	d
Match	cradle.c	/^void Match(char x) {$/;"	f
Multiply	main.c	/^void Multiply() {$/;"	f
SkipWhite	cradle.c	/^void SkipWhite() {$/;"	f
Substract	main.c	/^void Substract() {$/;"	f
Term	main.c	/^void Term() {$/;"	f
UpCase	cradle.h	4;"	d
_CRADLE_H	cradle.h	2;"	d
main	main.c	/^int main() {$/;"	f
tmp	cradle.h	/^static char tmp[MAX_BUF];$/;"	v
token_buf	cradle.h	/^static char token_buf[MAX_BUF];$/;"	v
